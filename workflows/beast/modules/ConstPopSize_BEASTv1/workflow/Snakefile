"""ConstPopSize-BEAST1

This module generates an XML file to be run by BEASTv1.10.4/5, assuming a constant population size model with an HKY substitution model and a strict clock model. See more details here (https://beast.community/tree_priors#:~:text=Constant%20population%20size,-This%20model%20assumes&text=This%20model%20is%20suitable%20whenever,rich%20models%20can%20be%20compared). More details to be added soon.

Params:
    chain_length (integer): length of MCMC chain (default is 1000000)
    screen_log_every (integer): frequency of screen log output (default is 10000)
    file_log_every (integer): frequency of file log output (default is 10000)
    tree_log_every (integer): frequency of tree log output (default is 10000)
    const_pop_size_model:
        initial_value (float): initial value of constant population size (default is 1)
        lower (float): lower bound of constant population size (default is 0)
    strict_clock_model:
        clock_rate (float): rate of strict clock model (default is 0.0001)
    hky_model:
        frequencies:
            A (float): base A frequency (default is 0.25)
            C (float): base C frequency (default is 0.25)
            T (float): base T frequency (default is 0.25)
            G (float): base G frequency (default is 0.25)
        kappa:
            initial_value (float): initial value of kappa (default is 2)
            lower (float): lower bound of kappa (default is 0)
    priors:
        kappa:
            lognormal:
                mean (float): mean of lognormal distribution as prior for kappa (default is 1)
                stdev (float): standard deviation of lognormal distribution as prior for kappa (default is 1.25)
                offset (float): offset of lognormal distribution as prior for kappa (default is 0)
        frequencies:
            uniform:
                lower (float): lower bound of uniform distribution as prior for frequencies (default is 0)
                upper (float): upper bound of uniform distribution as prior for frequencies (default is 1)
    input_alignment (string/filepath): filename of input alignment NEXUS file
    output:
        xml (string): filename of output XML file
        filename_stem (string): filename stem of output files to be generated by BEAST
"""
configfile: "config/config.yaml"

indir=config["input_namespace"]
outdir=config["output_namespace"]
params=config["params"]

def resource(name=""):
    from snakemake.remote import AUTO

    filename = srcdir(f"../resources/{name}")
    try:
        return AUTO.remote(filename)
    except TypeError:
        return filename

rule target:
    input:
        template = resource("templates/constPopSize.HKY.strict.template.xml"),
        alignment = f"results/{indir}/{params['input_alignment']}",
        beastgen = resource("executables/beastgen.jar"),
    output:
        output_xml = f"results/{outdir}/{params['output']['xml']}",
    conda:
        "envs/conda.yaml"
    params:
        chain_length=params["chain_length"],
        screen_log_every=params["screen_log_every"],
        file_log_every=params["file_log_every"],
        tree_log_every=params["tree_log_every"],
        const_pop_size_init=params["const_pop_size_model"]["initial_value"],
        const_pop_size_lw=params["const_pop_size_model"]["lower"],
        strict_clock_rate=params["strict_clock_model"]["clock_rate"],
        hky_freq_A=params["hky_model"]["frequencies"]["A"],
        hky_freq_C=params["hky_model"]["frequencies"]["C"],
        hky_freq_T=params["hky_model"]["frequencies"]["T"],
        hky_freq_G=params["hky_model"]["frequencies"]["G"],
        hky_kappa_init=params["hky_model"]["kappa"]["initial_value"],
        hky_kappa_lw=params["hky_model"]["kappa"]["lower"],
        prior_kappa_lognormal_mean=params["priors"]["kappa"]["lognormal"]["mean"],
        prior_kappa_lognormal_stdev=params["priors"]["kappa"]["lognormal"]["stdev"],
        prior_kappa_lognormal_offset=params["priors"]["kappa"]["lognormal"]["offset"],
        prior_frequencies_uniform_lw=params["priors"]["frequencies"]["uniform"]["lower"],
        prior_frequencies_uniform_up=params["priors"]["frequencies"]["uniform"]["upper"],
        output_filename_stem=params["output"]["filename_stem"]
    shell:
        """
        # beastgen requires a relative path to the template file
        cp {input.template} template.xml

        java -jar {input.beastgen} \
            -D "\
                chainLength={params.chain_length},\
                screenLogEvery={params.screen_log_every},\
                fileLogEvery={params.file_log_every},\
                treeLogEvery={params.tree_log_every},\
                constPopSizeInit={params.const_pop_size_init},\
                constPopSizeLw={params.const_pop_size_lw},\
                strictClockRate={params.strict_clock_rate},\
                hkyFreqA={params.hky_freq_A},\
                hkyFreqC={params.hky_freq_C},\
                hkyFreqT={params.hky_freq_T},\
                hkyFreqG={params.hky_freq_G},\
                hkyKappaInit={params.hky_kappa_init},\
                hkyKappaLw={params.hky_kappa_lw},\
                priorKappaLognormalMean={params.prior_kappa_lognormal_mean},\
                priorKappaLognormalStdev={params.prior_kappa_lognormal_stdev},\
                priorKappaLognormalOffset={params.prior_kappa_lognormal_offset},\
                priorFrequenciesUniformLw={params.prior_frequencies_uniform_lw},\
                priorFrequenciesUniformUp={params.prior_frequencies_uniform_up},\
                outputFilenameStem={params.output_filename_stem}\
            " \
            template.xml \
            {input.alignment} \
            {output.output_xml}

        # Tidy-up working folder
        rm template.xml
        """
